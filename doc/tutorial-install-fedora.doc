/**

\page tutorial-install-fedora Tutorial: Installation from source for Linux Fedora
\tableofcontents

In this tutorial you will learn how to install ViSP from source on Linux Fedora. These steps have been tested for Fedora 21 (64 bit) distribution, but should work with any other distribution as well. 

\note Concerning ViSP installation, we provide also other \ref tutorial.

\section install_fedora_required Install prerequisities

- gcc 4.4.x or later. This can be istalled with:
\code
$ su -c "dnf install gcc-c++"
\endcode
- CMake 2.6 or higher that could be installed with:
\code
$ su -c "dnf install cmake"
\endcode

\section install_fedora_3rdparty Install 3rd parties

ViSP is interfaced with several optional 3rd party libraries. The <a href="http://visp.inria.fr/software-architecture">complete list is provided here</a>.

\subsection install_fedora_3rdparty_recommended Recommended 3rd parties

We recommend to install the following:

- OpenCV
\code
$ su -c "dnf install opencv-devel"
\endcode
- libX11 to be able to open a window to display images
\code
$ su -c "dnf install libX11-devel"
\endcode
- lapack to benefit from optimized mathematical capabilities
\code
$ su -c "dnf install lapack-devel"
\endcode
- libdc1394 to grab images from firewire cameras
\code
$ su -c "dnf install libdc1394-devel"
\endcode
- libv4l to grab images from usb or analogic cameras
\code
$ su -c "dnf install libv4l-devel"
\endcode
- libxml2 to be able to configure the model-based trackers from xml files
\code
$ su -c "dnf install libxml2-devel"
\endcode
- QR code detection
\code
$ su -c "dnf install zbar-devel"
\endcode

\subsection install_fedora_3rdparty_other Other optional 3rd parties

We give also the way to install other 3rd party libraries to enable specific capabilities.

- Coin, to be able to support vrml cad model used by the model-based trackers
\code
$ su -c "dnf install Coin3-devel"
\endcode
- libjpeg, libpng to support jpeg and png images (only useful if OpenCV is not installed)
\code
$ su -c "dnf install libjpeg-devel libpng-devel"
\endcode
- ffmpeg, to be able to read or encode compressed video streams (only useful if OpenCV is not installed)
\code
$ su -c "dnf install ffmpeg-devel"
\endcode
- Ogre 3D if you want to do augmented reality or simulation
\code
$ su -c "dnf install ogre-devel ogre-samples ois-devel"
\endcode
- Datamatrix code detection 
\code
$ su -c "dnf install libdmtx-devel"
\endcode

\section install_fedora_install_visp Install ViSP from source code
\subsection install_fedora_get_source Getting ViSP source code

There are different ways to get ViSP source code:

- You can download the <a href="http://visp.inria.fr/download">latest release</a> as a zip or a tarball. Once downloaded, uncompress the file using either
\code
$ tar xvzf visp-x.y.z.tar.gz 
\endcode
or
\code
$ unzip visp-x.y.z.zip
\endcode

- You can also download a <a href="http://visp.inria.fr/download#snapshot">daily snapshot</a>. Once downloaded, uncompress the file using
\code
$ tar xvzf visp-snapshot-yyyy-mm-dd.tar.gz
\endcode

- Or you get the cutting-edge ViSP from <a href="https://github.com/lagadic/visp">GitHub repository</a> using the following command
\code
$ git clone https://github.com/lagadic/visp.git
\endcode

We suppose now that ViSP source is in a directory denoted \c \<source_dir\>, for example \c $HOME/visp

\subsection install_fedora_config Configuring ViSP from source

- Create first a directory denoted \c \<binary_dir\> where you want to build ViSP. This directory will contain generated Makefiles, object files, and output libraries and binaries.
\code
$ cd $HOME; mkdir visp-build
\endcode

- Enter the \c \<binary_dir\> and configure the build:
\code
$ cd $HOME/visp-build
$ cmake ../visp
\endcode
A more versatile way to configure the build is to use \c ccmake, the CMake GUI:
\code
$ ccmake ../visp
\endcode
The following image shows that this command allows to configure (just by pressing [c] key) the build in a more advanced way where some options could be easily turned On/Off. It allows also to see which are the 3rd parties that will be used. To generate the makefiles, just press [g] key in the ccmake gui.
\image html img-ccmake-ubuntu-all.jpeg Snapshot of the ccmake \c ../visp command used to configure ViSP.

Now we can build ViSP.

\subsection install_fedora_build Building ViSP libraries

- To build ViSP libraries proceed with:
\code
$ make -j4
\endcode

- To install ViSP proceed with:
\code
$ sudo make install
\endcode
\note This stage is optional, since ViSP could be used as a 3rd party without installation. 
\note The default install location is set to \c /usr/local. This location could be changed modifying \c CMAKE_INSTALL_PREFIX var. 

\subsection install_fedora_doc Building ViSP documentation

- To build ViSP documentation, you have first to install Doxygen package:
\code
$ su -c "dnf install doxygen graphviz"
\endcode
Then you can proceed with:
\code
$ cmake ../visp
$ make -j4 visp_doc
\endcode
The generated documentation is then available in \c \<binary_dir\>/doc/html/index\.html

- It is also possible to generate a more complete documentation that includes also all the internal classes. This could be achieved setting CMake var \c ENABLE\_FULL\_DOC=ON like:
\code
$ cmake ../visp -DENABLE_FULL_DOC=ON
$ make -j4 visp_doc
\endcode

\section install_fedora_dataset Install ViSP dataset
Some ViSP examples and tests require data (images, video, models) that are not part of ViSP source code but available in a separate archive named \c ViSP-images-x.y.z.zip. This archive could be downloaded from http://visp.inria.fr/download page. We provide here after the way to install these data if you want to run ViSP examples.

\code
$ cd $HOME
$ unzip ViSP-images-x.y.z.zip
\endcode

We suppose now that the data are located in \c $HOME/ViSP-images.
\code
$ ls $HOME/ViSP-images
Klimt	     README.md    circle  ellipse    iv    mbt   mire-2
LICENSE.txt  calibration  cube    ellipse-1  line  mire  video
\endcode

Set \c VISP_INPUT_IMAGE_PATH environment variable to help ViSP examples and tests to find the location of the data set. It's convenient if the environment variables is automatically added to your bash session every time a new shell is launched: 

\code
$ echo "export VISP_INPUT_IMAGE_PATH=$HOME" >> ~/.bashrc
$ source ~/.bashrc
\endcode

\note For historical reasons \c VISP_INPUT_IMAGE_PATH should not contain the folder \c ViSP-images, but the parent folder.

From now, you can try to run ViSP examples and tests. For example you can run \c displayX example that should open a windows with Klimt painting image and some overlay drawings:

\code
$ cd $HOME/visp-build
$ ./example/device/display/displayX

A click to close the windows...

A click to display a cross...
Cross position: 201, 441

A click to exit the program...
Bye
\endcode

\section install_fedora_tips Tips and tricks

\subsection install_fedora_tips_uninstall How to uninstall ViSP
After ViSP installation, you can remove installed material using:
\code
$ sudo make uninstall
\endcode

\subsection install_fedora_tips_modules How to build only ViSP libraries

If you want to build only ViSP modules libraries, nor the examples, tutorials and tests:
\code
$ make -j4 visp_modules
\endcode

\subsection install_fedora_tips_module_once How to build a ViSP specific module

If you want to build a given module and all the dependencies:
\code
$ make -j4 visp_<module_name>
\endcode
For example to build the model-based tracker module named mbt, run:
\code
$ make -j4 visp_mbt
\endcode

\subsection install_fedora_tips_target Which are the targets that could be run with make ?

To know which are the target available with \c make:
\code
$ make help | grep visp
... visp_tests
... visp_demos
... visp_tutorials
... visp_examples
... visp_modules
... visp_doc
... visp_core
... visp_detection
... visp_gui
... visp_io
... visp_klt
... visp_me
... visp_robot
... visp_sensor
... visp_ar
... visp_blob
... visp_visual_features
... visp_vs
... visp_vision
... visp_mbt
... visp_tt
... visp_tt_mi
\endcode

\subsection install_fedora_tips_3rd_party Which are the 3rd party libraries that are used in ViSP ?

To see which are the optional 3rd parties that are found during the configuration stage and that will be used by ViSP during the build you can have a look to the text file named \c ViSP-third-party.txt and located in \c \<binary_dir\>. We provide hereafter an example of a possible content of this file:
\code
                    ViSP third-party libraries

Below you will find the list of third party libraries used to 
build ViSP on your computer.

Mathematics:
  Gnu Scientific Library      : no
  Lapack/blas                 : yes
Simulator:
  Ogre simulator              : no
  \- Ogre3D                   : no
  \- OIS                      : no
  Coin simulator              : no
  \- Coin3D                   : no
  \- SoWin                    : no
  \- SoXt                     : no
  \- SoQt                     : no
  \- Qt4                      : no
  \- Qt3                      : no
Robots
  Afma6                       : no
  Afma4                       : no
  Biclops                     : no
  Ptu46                       : no
  Pioneer                     : no
  Viper S650                  : no
  Viper S850                  : no
Video devices (display)
  X11                         : yes
  GTK                         : no
  OpenCV                      : yes 
  GDI                         : no
  Direct3D                    : no
Framegrabbers
  Firewire libdc1394-2.x      : yes
  Video For Linux Two         : yes
  DirectShow                  : no
  CMU 1394 Digital Camera SDK : no
  OpenCV                      : yes 
Specific devices
  Yarp                        : no
  Kinect                      : no
  \-libfreenect               : no
  \-libusb-1.0                : no
  \-pthread                   : yes
Video and image Read/Write:
  FFMPEG                      : no
  libjpeg                     : no
  libpng                      : no
Misc:
  XML2                        : yes
  pthread                     : yes
  OpenMP                      : yes
  zbar                        : yes
  dmtx                        : no
Documentation:
  Doxygen                     : no
  Graphviz dot                : no
ViSP built with C++11 features: no
\endcode

\section install_fedora_next Next tutorial

You are now ready to see the next \ref tutorial-getting-started that will show you how to use ViSP as a 3rd party to build your own project.

*/
